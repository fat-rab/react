react =>用于构建用户界面的 JavaScript 库，对组件的状态做出响应，并且更新页面的UI
http://huziketang.mangojuice.top/books/react/lesson17
react生态：react-redux  react-router dva antDssign styled-Component ReactNative   TaraJS

学习过程 
基础知识 ：环境搭建,jsx,css,props
进阶知识 :  事件处理，state，生命周期，设计模式
生态工具 :   router,antdesign
高级应用 ： Hooks,新生命周期，状态管理，TS应用
原理讲解 ： 虚拟DOM，Fiber,diff算法

1 搭建
npm run eject 会将原本creat react app对webpack，babel等相关配置的封装弹射出来

JSX是JS的语法扩展，使用XML标记的方式直接声明界面
1 不是模板引擎语言
2 声明式方式创建UI，处理UI逻辑
3 遵循JS语法，无学习门槛

JSX规则
1 在JSX中嵌入表达式，用{}包裹
2 大写开头作为定义组件，小写tag为原生DOM节点
3 JSX标签可以有特定属性和子元素
4 JSX只能有一个根元素(可以使用React.Fragments包裹也可以使用<></>代替)

Fragments 
1 可以包含并列的子元素，避免生成多余的DOM节点
2 编写表格组件，包裹子元素让HTML生效

组件
函数组件（比较轻量）
1函数组件也叫无状态组件
2组件内部没有this
3没有生命周期
类组件

列表渲染 使用map
条件渲染 三目运算符  函数  &&

css module 
1不使用选择器，使用class名定义样式
2不层叠class，使用一个class定义样式
3用composes来组合

React事件要素
1事件发布
首先react会将事件绑定到document上面，统一的使用事件监听，并在冒泡阶段处理事件，所以当挂载或者卸载组件的时候
，只需要在统一的监听位置添加或者删除对象，因此会极大的提高效率，当事件触发的时候，组件会生成一个合成事件
然后传递到document中，document会通过dispatchEvent回调函数依次执行监听函数
2事件注册
组件生成的时候，将虚拟DOM中所有的事件对应的原生事件都注册在document当中一个监听器中
react事件是合成事件，不是DOM原生事件
document监听所有支持事件
使用统一的分发函数dispatchEvent

优化渲染
1PureComponent
2shouldComponentUpdate(nextState,nextProps)

使用不可变数据
避免引用产生的副作用，做成错误（PureComponent）

stateful和stateless
Stateful  （有状态组件,类组件，容器组件）
stateless   (无状态组件，函数组件，展示组件)
尽可能通过状态提升原则，将需要的状态提取到父组件中，而其他的组件使用无状态组件编写

生命周期 （旧）
创建阶段
1执行constructor构造函数，初始化props和state（getDefaultProps和getInitialState） （初始阶段，2，3，4是挂载阶段）
初始化内部状态，如果没有显示的调用constructor则会有一个默认的constructor会被添加
需要使用super()调用基类的构造方法,将父组件的props注入给子组件
可以直接修改state,定义this.state的初始内容 
2componentWillMount （移除）
组件挂在到DOM之前调用（ui渲染完成之前），并且只会执行一次
在这里调用setState不会触发render，所以可以将需要的操作提前到constructor当中
3render 
类组件必须要有的方法，返回一个顶级的react元素（不能有并列元素）
渲染的是虚拟DOM的一个React对象
不能再render函数中调用this.setState
父组件先render 然后才是子组件
4componentDidMount
在Ui渲染完成后调用（此时已经有了真实的DOM），只执行一次，可以用来获取外部的数据资源
父组件的componentDidMount在子组件的componentDidMount全部执行完毕之后，才会执行
更新阶段
更新组件分成两类（三种情况）
1父组件重新render ，
父组件重新render引起子组件重新render的情况有两种
a 每当父组件重新render导致重新传props，引起的子组件的render,可以通过shouldComponentUpdate优化
b 在componentWillRecieveProps方法中，将props转换成自己的state,这种情况不会引起二次渲染
componentWillReceiveProps(nextProps) { // 父组件重传props时就会调用这个方法
        this.setState({someThings: nextProps.someThings});
}
2第二种就是组件本身调用setState,可以通过shouldComponentUpdate优化
1componentWillRecieveProps(只有props更新会触发) （移除）
组件接受到新的props的时候触发，可以用来比较新老props，不推荐使用，有新的生命周期函数取代
2shouldComponentUpdate
比较新老props和state 判断是否执行render 方法，可以用pureComponent自动执行
3componentWillUpdate （移除）
此方法在调用render方法前执行，在这边可执行一些组件更新发生前的工作，一般较少用。使用不当会造成无限循环
4render
5componentDidUpdate
每次ui更新时候调用 更新一些外部数据资源
接受nextProps和nextState，可以与原来的数据进行对比，进行一些业务逻辑的处理
卸载阶段
componentWillUnmount
组件移除的时候调用
可以用来做资源的释放，比如将绑定的timer清理

react组件设计模式
1 高阶组件hoc:用于逻辑复用  ,使用拥有复用逻辑的函数处理不同的组件
本质是利用一个接受react组件作为参数的函数，返回一个新的react组件
对已有组件进行封装，形成新的有自己的状态和逻辑的组件
const newComponent=hoc(oldComponent)
2Render Props 使用子组件复用逻辑，父组件传入不同的内容
函数作为子组件或者  
（1） 定义子组件  在子组件中调用父组件传递得函数  this.props.render(this.state)
  (2)   使用函数作为props传递给子组件
函数作为props.children 
子组件调用this.props.children(this.state)
父组件传入函数


reactRouter
https://react-router.docschina.org/
https://react-guide.github.io/react-router-cn/
Route  比较path属性和当前地址的pathname，当一个<Route>匹配成功，他会渲染其他内容，当它不匹配时，就会渲染NULL

Route 是一个封装好的组件，会自动传入三个props:history,location,match
history使用浏览器的history对象，在浏览器中导航
location:目前应用的地址等属性
match：params 储存传递的参数，isExact 如果匹配整个url:true   path：用于匹配路径模式，url:用于匹配部分url 



Switch  一个<Switch>会遍历其所有的子<Route>元素，并仅渲染与当前地址匹配的第一个元素
exact  需要完全匹配
Link 使用<Link> 作为url的导航，让整个应用不刷新页面在不同网址之间切换

<Route>有三种渲染方式
<Route component>
<Route render={(props)=><home data="xx"  {...props} />}>  可以用来给组件传参
<Route children>

路由传参
path="/products/:id"
获取this.props.match.params.id
path="/posts/:year?/:month?"  参数可选

重定向
<Route path="/not-fount" component={NotFound}></Route>
<Route path="/" exact component={Home}></Route>
<Redirect to="/not-fount"></Redirect>
这三个配合使用可以让匹配不到的地址不跳转到home ,而是跳转到not-found
<Redirect from="/mall" to="/products"></Redirect>
在地址上输入mall 或跳转到products


antDesign生态 dvaJS umiJS  antDesignPro   motion Design(专注于动画效果) antV(可视化)


虚拟DOM
是一种编程理念，将UI虚拟的保存在内存中,是内存对象，并且通过某些库渲染成真实的DOM ，这个过程又叫协调
15版本又叫做 栈协调（stack Reconciler），此时vdom是一个对象
栈协调的缺点：过程一旦开始，就无法停止，如果页面比较复杂，更新的时间比较长，如果这个时候对DOM进行交互，很可能会卡住
16版本推出了fiber协调，使用fiber节点来描述DOM节点，fiber节点的数据结构是一个单链表
单链表：用一组地址任意的存贮单元，存放线性表中的数据元素
1可阻断的渲染过程
2适时重启渲染
3父子组件中来回切换布局更新
4更清晰的错误处理

原生DOM更新=》直接调用DOM API更新UI
virtual DOM 更新
每次render都会产生一份新的react dom,然后virtual DOM 要对新旧 react dom进行比较，从而确定再旧 dom的基础上进行多少变更，确定最优的变更策略之后调用DOM API 更新ui

virtual DOM 如何提高性能
我们将render产生的virtual DOM 简称vDOM,
通常调用setState方法触发vdom更新
通过对比新旧vdom ，确定最优实现新vdom (vitrual DOM Diff)

vitrual DOM Diff 的层次
1 组件级别比较
2 元素级别比较

组件级别比较 component diff
如果组件不同的话，则直接更换组件及其子组件
元素级别比较
对元素进行添加删除移动，移动相对复杂，先判断新旧节点是否一样，如果一样调用移动的方法(如果是将后面的节点移动到前面，进行的操作时将前面的节点向后移动)


新生命周期react16
https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/
挂载时
constructor getDerivedStateFromProps（静态方法，前面加static） render React更新DOM和refs componentDidMount
更新时
getDerivedStateFromProps shouldComponentUpdate render getSnapshotBeforeUpdate
componentDidUpdate 
卸载时
componentWillUnmount

挂载阶段
constructor  构造函数，初始化state，为事件处理函数绑定实例
getDerivedStateFromProps 第一个参数nextProps，返回一个新的state或者null
render 渲染函数 更新DOM和refs 
componentDidMount 挂载成功之后立刻调用

更新阶段的函数
getDerivedStateFromProps props或者state变化还有forceUpdate的时候触发
shouldComponentUpdate 判断是否进行更新 forceUpdate会跳过这一步
render 
getSnapshotBeforeUpdate render方法之后调用，返回一个dom更改之前的快照，将配合后续的componentDIdUpdate方法使用
componentDIdUpdate 更新会立刻调用，接受两个参数旧的props和state,如果实现getSnapshotBeforeUpdate，则会返回旧DOM的快照，如果这里需要改变state需要进行条件判断，否则会进入无限循环

卸载阶段
componentWillUnmount 卸载函数，组件卸载及销毁之前的调用，主要用于清楚一些在生命周期订阅，真实DOM事件，以及setTimeout/setInterval的返回值

异常捕获函数
componentDidCatch 生命周期方法在后代组件抛出错误后被调用，方法接受两个参数error,info，分别是错误信息和错误组件的栈信息，推荐在此方法中做一些错误日志的上传
getDerivedStateFromError 在后代组件抛出错误后调用，接受一个参数error表示具体的错误信息，在此方法中兼容错误页面，返回一个变量，当出现一个不可抵抗的错误的时候，优化用户体验

新旧生命周期升级
1 componentWillMount(移除，如果一定要使用可以用UNSAFE_componentWillMount)
render 方法之前调用，再次调用setState并不会触发再次渲染，通常会在这个方法中进行页面标题的修改以及一些和再次render不相关的操作
升级：与state相关的操作挪到constructor中执行，异步操作以到componentDidMount中
2 componentWillUpdate（UNSAFE_componentWillUpdate）
在渲染之前调用，不能调用setState，触发循环，内存泄漏
升级：应该再shouldComponentUpdate 判断更新
3 componentWillReceiveProps
接受父级组件传递过来最新的props，转化为组件内的state,判断是否进行更新或者执行异步请求数据
升级：和渲染相关的props直接渲染，不需要处理为组件内的state，异步请求再componentDidUpdate中处理，
getDerivedStateFromProps方法替换，需要考虑生命周期的执行顺序


react16 npx react-codemod rename-unsafe-lifecycles 更换生命周期函数名称


hooks 
hooks使命
1逻辑组件复用 ：逻辑与Ui分离，函数组件拥有state，函数组件复用（render props和hoc都有一定的问题）
render props :通过渲染props来实现逻辑组件复用(通过children传给子组件一个render函数，子组件通过this.props.children()调用)，  
问题renderprops通过嵌套组件实现，在实际业务中，会出现嵌套多层，以及梳理props不清晰的问题
hoc 通过对现有组件进行拓展，增强的方式来实现复用，通常采用包裹方法实现
问题 告诫组件的时间会额外的增加元素层级，是的页面元素的数量更加臃肿

hooks api
https://overreacted.io/zh-hans/a-complete-guide-to-useeffect/
useState 函数组件中的state方法
useEffect  函数组件处理副作用的方法，第一个参数是执行副作用的方法，第二个是执行的前置条件(在 React 组件中执行过数据获取、订阅或者手动修改过 DOM)
useReducer 另外一种useState 和redux有点类似
useRef 返回一个突变的ref对象，对象在函数组件的执行周期内一直存在
useCustom 自定义hooks组件


react New Feature
react Fragments/Portals/Strict Mode
2 Portals 改变挂载节点得api
import {createProtal} from "react-dom"
const  mountDom =document.querySelector("#xx")
render(){
 return createProtal(
 <other/>,
  mountDom
)
}
3 strict Mode
strict Mode 提供一个可以显示潜在问题得组件 ,但是包裹的组件会render两遍
1 检测是否使用即将废弃得生命周期函数
2 检测是否使用 string ref和findDOMNode 以及老版得context api
3检测是否多次调用不可预测得副作用
React Concurrent Mode
1一个还在试验阶段的特性
2目的：让react应用能够更好的响应交互并且还能根据用户设备的硬件性能和网络条件进行对应的调节，让应用的体检上一个阶梯


Redux
https://www.redux.org.cn/docs/introduction/CoreConcepts.html
https://zhuanlan.zhihu.com/p/20597452
Redux基础
1Redux动机
Redux适合于大型复杂的单页面应用（需要管理的状态多且复杂）
2Redux核心概念
2-1 state 应用全局数据的来源，数据驱动视图的核心
2-2 action 数据发生改变动作的描述
2-3 reducer 结合state和action ，并返回一个新的state
3Redux的三个原则
3-1单一数据源：整个应用的state被储存在一颗object tree 中，并且这个Object tree只存在于唯一一个store中
3-2state是只读的：唯一改变state的方法是触发action,action是一个用于描述已发生事件的普通对象
3-3使用reducer纯函数根据action来执行修改state：纯函数意味着同样的输入就会有同样的输出,不要再里面修改传入的参数，执行有副作用的操作，如请求api和路由跳转，调用非纯函数如date.now()

redux api
1 createStore 创建redux store来存放应用中所有的state
2 combineReducers 将多个不同reducer函数作为value的object，合并成一个最终的reducer函数
3 applyMiddleware 接受自定义功能的middleware来扩展redux(扩展异步操作)
4 compose 函数式编程中的方法，右到左来组合执行参数

react-redux Api 将react和redux关联起来的第三方插件
1connect 在容器组件中将react展示组件和redux链接起来
2provider 提供被connect链接起来的组件能够访问得到store
3在connect调用mapStateToProps 方法指定如何把当前redux store state映射到展示组件的props中，接受两个参数state(redux保存的全局状态)和ownProps(组件本身自带的属性prop)
4在connect调用mapDispatchToprops方法 返回期望注入到展示组件的props的回调方法
redux进阶
1redux异步 使用applyMiddleware增强redux，createStore(reducers,applyMiddleware(thunk))
import { createStore, applyMiddleware } from "redux";
import thunk from "redux-thunk";
import reducers from "../reducer";
export default createStore(reducers, applyMiddleware(thunk));
action.js
export function asynUpdateName(params) {
  return (dispatch, getState) => {
    console.log(getState());
    setTimeout(() => {
      dispatch(updateName(params));
    }, 2000);
  };
}
2reselect&immutable Data
2-1reselect 针对mapStateToProps中state在同一数据源中需要筛选的场景，因为mapStateToProps中的state如果带有筛选函数，会导致每次都返回一个新的对象,会导致相同的数据会重新触发一次action中的行为
2-2immutable Data  避免副作用，状态可追溯，react中用shallowCompare做比较
2-2-1 immutable 提供完整的api,和普通的js对象不同，如果是新的项目，可以使用
2-2-2 immer js原生数据结构实现immutable，也提供了一套对应的api,推荐使用
由于react是浅比较，所以当reducer对嵌套层级比较深的对象属性惊醒修改的时候，不会触发更新，即使数据已经改掉了
 shouldComponentUpdate(nextProps, nextState) {
    return shallowCompare(this, nextProps, nextState);
  }
3redux-actions&@rematch/core&dva
首先要了解redux的不足：
Redux范式繁琐：完成一次页面渲染，需要在Action层分别定义type,Action方法，Reducer中响应Action方法，完成一次流程需要在多个文件夹中来回切换
基础功能匮乏：默认只有同步方法，异步数据请求需要安装插件（redux-thunk），复杂功能交由第三方插件完成，有一定的接入成本
三种解决方案 
                           多层范式     同步/异步     集成插件
redux-actions       否               不区分         否
@rematch/core    否               区分            否
dva                       否               区分            是

Context  16.3之前
:React的“上下文”，贯穿了整个React,不需要层层传递，父级节点与应用节点都需要强制类型声明，关键字不一样，全局上下文，贯穿了整个应用
childContextTypes 父级组件定义，声明了Context对象属性
getChildContext 父级组件定义，返回context对象，方法名是约定的
contextTypes 在任意层级的子级组件中定义，就可以在子级组件中使用
缺陷：父级组件的shouldComponentUpdate返回false,就会引起更新失败，导致子组件接收到的context还是老的，破坏了传递流程。PureComponent或者自定义的优化可能接收不到context更新

new Context  解决了老版context api更新失败的问题
Provider(生产者) 
1 createContext 创建一个Context对象，订阅了这个Context对象的组件，会从组件书中离自身最近的那个匹配的Provider中读取当前的context值
2 Context.Provider 父Context对象放回的Provider组件，允许消费组件订阅context的变化
Consumer（消费者）
1 Class.contextType 申明了contextType属性的组件会被赋值一个Context对象，组件内的this.context可以访问最近Context上的值。
2 Context.Consumer 函数组件订阅Context对象的方式，如同contextType之于Class组件

Context 和Redux 
Context 
1 只是解决了数据传递的问题
2 对复杂应用缺少范式，不利于多人合作，也不利于项目的整体架构
3 有限使用
Redux
1 不单单是指数据传递，更是处理复杂应用的标配
2 不会被取代